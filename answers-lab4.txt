Lab4 Questions
516030910006 方俊杰

1. 比较 kern/mpentry.S 和 boot/boot.S，可以知道 MPBOOTPHYS 的作用是
 计算symbol 的绝对地址，而不是依赖 linker 来填充。
在 mpentry.S 执行时 BSP 处于保护模式，但是 AP 还没有开启页表仍处于实模式，
只能使用物理地址，需要该宏转换

2. 看上去使用了 kernel lock 保证了同时只有一个 CPU 会进入 kernel code，那为什么
还要给每个 CPU 独立的 kernl stack 呢？
在不同的内核栈上保存了不同的信息，如果某CPU从内核返回时留下了将来要用的信息,就需要单独的栈。
中断到来会使用kernel stack，如果一个 CPU 在内核态时，另一个CPU 有一个中断到来可能会改变原来 CPU 在内核栈的数据。

3. 在实现 env_run 时调用了 lcr3，但在这前后都解引用了 e ，但是页表换了，为什么都能正确解引用？
e 是处于内核地址的，不同的环境的页表映射中对于内核地址的映射都是相同的，
虽然页表换了，但是 e 的映射仍旧是对的。

4. 无论何时 kernel 转换 env 都要保存 前一个 env 的寄存器，为什么？何时发生？
这些信息是前一个 env 下次再被调度到时能够正确运行的保证，因此需要保存。
在 trap 进入内核前保存信息，即 kern/trapentry.S 中；
在 env.c 的 env_run 调用 env_pop_tf 时恢复。

Challenge
实现 fixed-priority scheduler 固定优先级调度。
首先需要在 struct Env 增加一个域 env_pr 表示环境的执行优先级，越小优先级越高。
然后需要一个新的 syscall （set_env_pr）使得 user mode 可以改变当前环境的优先级，
这需要修改较多文件,包括：
* inc/syscall.h，在 enum 增加新的 syscall 标识符
* inc/lib.h，声明新的 user 可见系统调用
* kern/syscall.c， 实现新的系统调用 set_env_pr 改变当前环境的优先级。并在 syscall 函数中增加新的 dispatch 分支
* lib/syscall.c，声明该 syscall 的 stub
然后需要修改调度函数，使得每次调度遍历所有环境，找到 RUNNABLE 中优先级最小的一个并与当前环境比较后运行优先级高者。
另外修改了 fork() 使得所有环境在创建时的优先级都是最高的 0。
还另写一个测试程序验证调度，在该测试程序中，父进程会依次 fork 出 3 个子进程。
每个子进程被 fork 出来后即改变优先级为对应的 fork 次数，就是父进程循环次数 i。
然后子进程进入一个循环会每次打印一段信息后调用 sys_yield，共循环 9 次，
在循环到第 3 次时，子进程会修改自己的优先级为 （4-i）。
PDF 中有运行截图，效果良好。
程序分为几个阶段：
1. 父进程创建了 3 个子进程，子进程各以优先级 0 运行一次，然后改变优先级到 i。
2. child 1 第二次改变优先级之前，进入子进程循环，此时 child 1 优先级最高，
即使重新调度也会是它被运行。3 次循环后 child 1 优先级变为 3。
此时 child 1 2 3 的优先级分别为 3 2 3，所以接下来 child 2 被调度，
child 2 改变优先级没有变化，child 2 执行 9 次循环结束
3. 此时 child 1 3 的优先级都是 3，则会以 RR 的方式轮询，child 1 3 各自运行。
然后 child 3 运行 3 次后改变优先级为 1，则 child 3 优先级最高，一直被调度直到退出
4. 只剩下优先级为 3 的 child 1 执行直到退出，则所有环境退出
